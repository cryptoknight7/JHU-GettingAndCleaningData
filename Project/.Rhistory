a <- available.packages()
head(rownames(a), 5)
head(rownames(a), 200)
head(rownames(a), 250)
head(rownames(a), 300)
set.seed(10)
x <- rbinom(10, 10, 0.5)
y <- rnorm(10, 0, 20)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
y
e
x
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
?system.time
?ppois
?rbinom
install.packages("RMySQL")
setwd("~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course")
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R')
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R')
getRestaurantData()
restData <- read.csv("./data/restaurants.csv")
summary(restData)
str(restData)
head(restData, n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$policeDistrict, na.rm=TRUE)
quantile(restData$zipCode, na.rm=TRUE)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colsums(is.na(restData))
colSums(is.na(restData))
colSums(is.na(restData))
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21146"))
restData[restData$zipCode %in% c("21212", "21213"),]
restData[restData$zipCode %in% c("21212", "21213"),]
warpbreaks
UCB
head(UCBAdmissions)
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender  + Admit, data=DF)
xt
ftable(xt)
object.size(UCBAdmissions)
object.size(restData)
print(object.size(restData), units="Mb")
print(object.size(restData), units="Kb")
data(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gears", "cyl"), measure.vars=c("mpg", "hp"))
install.packages(melt)
??melt
library(reshape2)
carMelt <- melt(mtcars, id=c("carname", "gears", "cyl"), measure.vars=c("mpg", "hp"))
data(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gears", "cyl"), measure.vars=c("mpg", "hp"))
rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars=c("mpg", "hp"))
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
cylData2 <- dcast(carMelt, variable ~ cyl,mean)
cylData2
data(InsectSprays)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns, sum)
library(plyr)
ddply(InsectSprays, .(spray), summarize, sum=sum(count))
spraySums <- ddply(InsectSprays, .(spray), summarize, sum=ave(count, FUN=sum))
dim(spraySums)
head(spraySums)
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='ASCII')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='ASCII')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='ASCII')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getPeerReviewData()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getPeerReviewData()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getPeerReviewData()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getPeerReviewData()
reviews = read.csv("./data/reviews.csv");
solutions <- read.csv("./data/solutions.csv")
names(reviews)
names(solutions)
mergedData = merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)
head(mergedData)
intersect(names(solutions),names(reviews))
mergedData2 = merge(reviews,solutions,all=TRUE)
head(mergedData2)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ1()
hid = read.csv("./data/hid.csv")
agricultureLogical = (with(hid, ACR==3 & AGS==6))
agricultureLogical
hid[which(agricultureLogical, TRUE)]
which(agricultureLogical)
head(which(agricultureLogical), n=3)
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ2()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ2()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ2()
install.packages("jpeg")
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
install.packages("jpeg")
install.packages("jpeg")
getQuizDataQ2()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ2()
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
summary(pic)
str(pic)
quantile(pic, probs = c(30, 50, 80)/100)
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ2()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
??Rank
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
??with
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
??with
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
install.packages(Hmisc)
install.packages("Hmisc")
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
??cut2
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
??cut2
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ4()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3n4()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3n4()
source.with.encoding('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Week3Test.R', encoding='UTF-8')
getQuizDataQ3to5()
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/run_analysis.R')
setwd("~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course")
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/run_analysis.R')
getwd()
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
path
dataSetUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "Dataset.zip"
file.exists(path)
fileName <- "UciHarDataset.zip"
if (!file.exists(path)) {dir.create(path)}
download.file(dataSetUrl, file.path(path, fileName))
file.exists(fileName)
file.exists(file.path(path, fileName))
unzip(file.path(path, fileName))
??ref.label
??R.options
??markdownToHTML
library(markdown)
install.packages("markdown")
install.packages("markdown")
library(markdown)
??file.path
??fread
??read.table
getwd()
setwd("~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project")
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
??require
source('~/Education/MOOC/JHUDataScience/03 - Getting and Cleaning Data course/Project/run_analysis.R')
